"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/cpf-cnpj-validator";
exports.ids = ["vendor-chunks/cpf-cnpj-validator"];
exports.modules = {

/***/ "(ssr)/./node_modules/cpf-cnpj-validator/dist/cpf-cnpj-validator.es.js":
/*!***********************************************************************!*\
  !*** ./node_modules/cpf-cnpj-validator/dist/cpf-cnpj-validator.es.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cnpj: () => (/* binding */ cnpj),\n/* harmony export */   cpf: () => (/* binding */ cpf),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   validator: () => (/* binding */ validator)\n/* harmony export */ });\n/*!\n * cpf-cnpj-validator v1.0.3\n * (c) 2020-present Carvalho, Vinicius Luiz <carvalho.viniciusluiz@gmail.com>\n * Released under the MIT License.\n */ const BLACKLIST = [\n    \"00000000000\",\n    \"11111111111\",\n    \"22222222222\",\n    \"33333333333\",\n    \"44444444444\",\n    \"55555555555\",\n    \"66666666666\",\n    \"77777777777\",\n    \"88888888888\",\n    \"99999999999\",\n    \"12345678909\"\n];\nconst STRICT_STRIP_REGEX = /[.-]/g;\nconst LOOSE_STRIP_REGEX = /[^\\d]/g;\nconst verifierDigit = (digits)=>{\n    const numbers = digits.split(\"\").map((number)=>{\n        return parseInt(number, 10);\n    });\n    const modulus = numbers.length + 1;\n    const multiplied = numbers.map((number, index)=>number * (modulus - index));\n    const mod = multiplied.reduce((buffer, number)=>buffer + number) % 11;\n    return mod < 2 ? 0 : 11 - mod;\n};\nconst strip = (number, strict)=>{\n    const regex = strict ? STRICT_STRIP_REGEX : LOOSE_STRIP_REGEX;\n    return (number || \"\").replace(regex, \"\");\n};\nconst format = (number)=>{\n    return strip(number).replace(/^(\\d{3})(\\d{3})(\\d{3})(\\d{2})$/, \"$1.$2.$3-$4\");\n};\nconst isValid = (number, strict)=>{\n    const stripped = strip(number, strict);\n    if (!stripped) {\n        return false;\n    }\n    if (stripped.length !== 11) {\n        return false;\n    }\n    if (BLACKLIST.includes(stripped)) {\n        return false;\n    }\n    let numbers = stripped.substr(0, 9);\n    numbers += verifierDigit(numbers);\n    numbers += verifierDigit(numbers);\n    return numbers.substr(-2) === stripped.substr(-2);\n};\nconst generate = (formatted)=>{\n    let numbers = \"\";\n    for(let i = 0; i < 9; i += 1){\n        numbers += Math.floor(Math.random() * 9);\n    }\n    numbers += verifierDigit(numbers);\n    numbers += verifierDigit(numbers);\n    return formatted ? format(numbers) : numbers;\n};\nvar cpf = {\n    verifierDigit,\n    strip,\n    format,\n    isValid,\n    generate\n};\nconst BLACKLIST$1 = [\n    \"00000000000000\",\n    \"11111111111111\",\n    \"22222222222222\",\n    \"33333333333333\",\n    \"44444444444444\",\n    \"55555555555555\",\n    \"66666666666666\",\n    \"77777777777777\",\n    \"88888888888888\",\n    \"99999999999999\"\n];\nconst STRICT_STRIP_REGEX$1 = /[-\\\\/.]/g;\nconst LOOSE_STRIP_REGEX$1 = /[^\\d]/g;\nconst verifierDigit$1 = (digits)=>{\n    let index = 2;\n    const reverse = digits.split(\"\").reduce((buffer, number)=>{\n        return [\n            parseInt(number, 10)\n        ].concat(buffer);\n    }, []);\n    const sum = reverse.reduce((buffer, number)=>{\n        buffer += number * index;\n        index = index === 9 ? 2 : index + 1;\n        return buffer;\n    }, 0);\n    const mod = sum % 11;\n    return mod < 2 ? 0 : 11 - mod;\n};\nconst strip$1 = (number, strict)=>{\n    const regex = strict ? STRICT_STRIP_REGEX$1 : LOOSE_STRIP_REGEX$1;\n    return (number || \"\").replace(regex, \"\");\n};\nconst format$1 = (number)=>{\n    return strip$1(number).replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\n};\nconst isValid$1 = (number, strict)=>{\n    const stripped = strip$1(number, strict);\n    if (!stripped) {\n        return false;\n    }\n    if (stripped.length !== 14) {\n        return false;\n    }\n    if (BLACKLIST$1.includes(stripped)) {\n        return false;\n    }\n    let numbers = stripped.substr(0, 12);\n    numbers += verifierDigit$1(numbers);\n    numbers += verifierDigit$1(numbers);\n    return numbers.substr(-2) === stripped.substr(-2);\n};\nconst generate$1 = (formatted)=>{\n    let numbers = \"\";\n    for(let i = 0; i < 12; i += 1){\n        numbers += Math.floor(Math.random() * 9);\n    }\n    numbers += verifierDigit$1(numbers);\n    numbers += verifierDigit$1(numbers);\n    return formatted ? format$1(numbers) : numbers;\n};\nvar cnpj = {\n    verifierDigit: verifierDigit$1,\n    strip: strip$1,\n    format: format$1,\n    isValid: isValid$1,\n    generate: generate$1\n};\nconst validator = (joi)=>({\n        type: \"document\",\n        base: joi.string(),\n        messages: {\n            \"document.cpf\": \"CPF inv\\xe1lido\",\n            \"document.cnpj\": \"CNPJ inv\\xe1lido\"\n        },\n        rules: {\n            cpf: {\n                validate (value, helpers, args, options) {\n                    if (!cpf.isValid(value)) {\n                        return helpers.error(\"document.cpf\");\n                    }\n                    return value;\n                }\n            },\n            cnpj: {\n                validate (value, helpers, args, options) {\n                    if (!cnpj.isValid(value)) {\n                        return helpers.error(\"document.cnpj\");\n                    }\n                    return value;\n                }\n            }\n        }\n    });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (validator);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cpf-cnpj-validator/dist/cpf-cnpj-validator.es.js\n");

/***/ })

};
;